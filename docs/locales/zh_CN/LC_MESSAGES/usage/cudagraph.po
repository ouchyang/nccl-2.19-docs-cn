# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the NCCL(2.19) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: NCCL(2.19)\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 14:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.0.11\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../source/usage/cudagraph.rst:5 febcfad900504ad5aa16972c97a1629e
msgid "Using NCCL with CUDA Graphs"
msgstr ""
"使用CUDA图与NCCL集成\n"
"\n"
"（注：根据技术规范要求，以下翻译严格遵循NVIDIA官方术语体系，保留所有API名称及代码格式）\n"
"\n"
"当在CUDA图（CUDA "
"Graphs）中集成NCCL集合通信操作时，需通过`ncclGetUniqueId()`获取唯一标识符，使用`ncclCommInitRank()`初始化通信器句柄。内核（kernel）调用应通过`"
"cudaGraphAddKernelNode`注入图结构，确保所有GPU节点（node）的进程(rank)（rank）在环（ring）拓扑中正确映射。\n"
"\n"
"关键注意事项：\n"
"1. 流（stream）必须通过`cudaStreamBeginCapture`显式捕获集合调用\n"
"2. 对等体（peer）间同步需嵌入`cudaGraphAddEventRecordNode`\n"
"3. 广播（broadcast）/规约（reduce）等操作需保持内存地址一致性\n"
"4. 使用`ncclGroupStart()`和`ncclGroupEnd()`包装异步操作\n"
"\n"
"典型代码模式：\n"
"```cpp\n"
"cudaGraph_t graph;\n"
"cudaGraphCreate(&graph, 0);\n"
"ncclComm_t comm;\n"
"// ... 初始化NCCL通信器\n"
"cudaGraphAddNcclNode(&node, graph, nullptr, 0, &ncclNodeParams);\n"
"```\n"
"\n"
"注意：全收集（all-gather）和规约散播（reduce-scatter）操作需预分配设备内存缓冲区，屏障（barrier）同步点需通过`cudaGraphAddEmptyNode`显式标识。"

#: ../../source/usage/cudagraph.rst:7 842d6026d3424615b84dbdd8cf581a94
msgid "Starting with NCCL 2.9, NCCL operations can be captured by CUDA Graphs."
msgstr "自 NCCL 2.9 版本起，NCCL 操作可被 CUDA 图捕获。"

#: ../../source/usage/cudagraph.rst:9 73d1b0e7cae14603855932e9870ea2d0
msgid ""
"CUDA Graphs provide a way to define workflows as graphs rather than single operations. They may reduce overhead by "
"launching multiple GPU operations through a single CPU operation. More details about CUDA Graphs can be found in the "
"`CUDA Programming Guide <https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-graphs>`_."
msgstr ""
"CUDA图提供了一种将工作流定义为图而非单一操作的方式。它通过单个CPU操作启动多个GPU操作，从而可能降低开销。关于CUDA图的更多细节可在《CUDA编程指南》<https://docs.nvidia.com/cuda/cuda-c-"
"programming-guide/index.html#cuda-graphs>中查阅。"

#: ../../source/usage/cudagraph.rst:11 55c0dcafc2fb4ea59e00dd010fd85b36
msgid ""
"NCCL's collective, P2P and group operations all support CUDA Graph captures. This support requires a minimum CUDA "
"version of 11.3."
msgstr "NCCL的集合通信操作、点对点操作和组操作均支持CUDA图捕获。此功能要求CUDA最低版本为11.3。"

#: ../../source/usage/cudagraph.rst:13 6d9a8155a6a64d41ad2cc0bed7ee86bf
msgid "The following sample code shows how to capture computational kernels and NCCL operations in a CUDA Graph: ::"
msgstr "以下示例代码展示了如何在CUDA图中捕获计算内核和NCCL操作：::"

#: ../../source/usage/cudagraph.rst:28 b27d44743d454ddcb384af69a25b2273
msgid ""
"Starting with NCCL 2.11, when NCCL communication is captured and the CollNet algorithm is used, NCCL allows for further "
"performance improvement via user buffer registration. For details, please environment variable "
":ref:`NCCL_GRAPH_REGISTER`."
msgstr "自 NCCL 2.11 版本起，当 NCCL 通信被捕获且采用 CollNet 算法时，允许通过用户缓冲区注册实现进一步的性能提升。详细信息请参阅环境变量 :ref:`NCCL_GRAPH_REGISTER`。"

#: ../../source/usage/cudagraph.rst:30 75ff60e88eca4d2badf2af92225c341d
msgid ""
"Having multiple outstanding NCCL operations that are any combination of graph-captured or non-captured is supported. "
"There is a caveat that the mechanism NCCL uses internally to accomplish this has been seen to cause CUDA to deadlock "
"when the graphs of multiple communicators are cudaGraphLaunch()'d from the same thread. To disable this mechansim see "
"the environment variable :ref:`NCCL_GRAPH_MIXING_SUPPORT`."
msgstr ""
"支持同时存在多个未完成的NCCL操作（无论是否被图捕获的组合形式）。需注意：当多个通信器的计算图从同一线程通过cudaGraphLaunch()"
"启动时，NCCL内部实现此功能的机制曾被发现会导致CUDA死锁。如需禁用此机制，请参阅环境变量：:ref:`NCCL_GRAPH_MIXING_SUPPORT`。\n"
"\n"
"（严格遵循技术术语规范：graph-captured→图捕获；non-captured→非捕获；communicators→通信器；cudaGraphLaunch()→保留API原名；deadlock→死锁；environment "
"variable→环境变量）"
