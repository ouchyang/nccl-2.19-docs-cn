# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the NCCL(2.19) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: NCCL(2.19) \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-27 10:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../source/api/comms.rst:3 fdf0ed90efa64aa7b3b9319cf40c393f
msgid "Communicator Creation and Management Functions"
msgstr ""

#: ../../source/api/comms.rst:5 97eaeca8c8884c31a6c2e1ee4fcc3879
msgid ""
"The following functions are public APIs exposed by NCCL to create and "
"manage the collective communication operations."
msgstr ""

#: ../../source/api/comms.rst:8 1fb89d4a8809406099f67dadec8e1edb
msgid "ncclGetLastError"
msgstr ""

#: ../../source/api/comms.rst:12 3d08080c72a34e1792660716ac8f6f20
msgid ""
"Returns a human-readable string of the last error that occurred in NCCL. "
"Note: The error is not cleared by calling this function. The *comm* "
"argument is currently unused and can be set to NULL."
msgstr ""

#: ../../source/api/comms.rst:18 3b7b6ebd8416406a82fa5392f81b034f
msgid "ncclGetVersion"
msgstr ""

#: ../../source/api/comms.rst:22 51ffce71a1d14480a754bd5a6b65ef4d
msgid ""
"The ncclGetVersion function returns the version number of the currently "
"linked NCCL library. The NCCL version number is returned in *version* and"
" encoded as an integer which includes the :c:macro:`NCCL_MAJOR`, "
":c:macro:`NCCL_MINOR` and :c:macro:`NCCL_PATCH` levels. The version "
"number returned will be the same as the :c:macro:`NCCL_VERSION_CODE` "
"defined in *nccl.h*. NCCL version numbers can be compared using the "
"supplied macro; :c:macro:`NCCL_VERSION(MAJOR,MINOR,PATCH)`"
msgstr ""

#: ../../source/api/comms.rst:30 d8cc35a241784855bcdada52ff07f5d8
msgid "ncclGetUniqueId"
msgstr ""

#: ../../source/api/comms.rst:34 1003577be7a34e37b8091643dce9c115
msgid ""
"Generates an Id to be used in ncclCommInitRank. ncclGetUniqueId should be"
" called once when creating a communicator and the Id should be "
"distributed to all ranks in the communicator before calling "
"ncclCommInitRank. *uniqueId* should point to a ncclUniqueId object "
"allocated by the user."
msgstr ""

#: ../../source/api/comms.rst:39 c0b903ee594441b0b5fbfee890afce4d
msgid "ncclCommInitRank"
msgstr ""

#: ../../source/api/comms.rst:43 c160cededa6144ccb9992e24da303d1c
msgid ""
"Creates a new communicator (multi thread/process version). *rank* must be"
" between 0 and *nranks*-1 and unique within a communicator clique. Each "
"rank is associated to a CUDA device, which has to be set before calling "
"ncclCommInitRank. ncclCommInitRank implicitly synchronizes with other "
"ranks, hence it must be called by different threads/processes or use "
"ncclGroupStart/ncclGroupEnd."
msgstr ""

#: ../../source/api/comms.rst:51 e9f5ee60bcb249d28df8134075800bcc
msgid "ncclCommInitAll"
msgstr ""

#: ../../source/api/comms.rst:55 f4d660aa16544b74b0ab3807e7e2e135
msgid ""
"Creates a clique of communicators (single process version) in a blocking "
"way. This is a convenience function to create a single-process "
"communicator clique. Returns an array of *ndev* newly initialized "
"communicators in *comms*. *comms* should be pre-allocated with size at "
"least ndev*sizeof(:c:type:`ncclComm_t`). *devlist* defines the CUDA "
"devices associated with each rank. If *devlist* is NULL, the first *ndev*"
" CUDA devices are used, in order."
msgstr ""

#: ../../source/api/comms.rst:63 3be8870184cb4f33a78171869fb8e962
msgid "ncclCommInitRankConfig"
msgstr ""

#: ../../source/api/comms.rst:67 dbceaebef1d84357a804a32e64d7ad58
msgid ""
"This function works the same way as *ncclCommInitRank* but accepts a "
"configuration argument of extra attributes for the communicator. If "
"config is passed as NULL, the communicator will have the default "
"behavior, as if ncclCommInitRank was called."
msgstr ""

#: ../../source/api/comms.rst:71 8aac64dde4514d3fb04ea4d9ac77b7b4
msgid ""
"See the :ref:`init-rank-config` section for details on configuration "
"options."
msgstr ""

#: ../../source/api/comms.rst:74 b93fde7bd60847fea3a9ac00ba725063
msgid "ncclCommSplit"
msgstr ""

#: ../../source/api/comms.rst:78 90a4281503ec4975936feaa76cd04e71
msgid ""
"The *ncclCommSplit* function creates a set of new communicators from an "
"existing one. Ranks which are passed the same *color* value will be part "
"of the same group, and a color must be a non-negative value. If it is "
"passed as *NCCL_SPLIT_NOCOLOR*, it means that the rank will not be part "
"of any group, therefore returning NULL as newcomm. The value of key will "
"determine the rank order, and the smaller key means the smaller rank in "
"new communicator. If keys are equal between ranks, then the rank in the "
"original communicator will be used to order ranks. If the new "
"communicator needs to have a special configuration, it can be passed as "
"*config*, otherwise setting config to NULL will make the new communicator"
" inherit the original communicator's configuration. When split, there "
"should not be any outstanding NCCL opereations on the *comm*. Otherwise, "
"it might cause deadlock."
msgstr ""

#: ../../source/api/comms.rst:91 506d7ce55d1447e3a9044252b6d504bb
msgid "ncclCommFinalize"
msgstr ""

#: ../../source/api/comms.rst:95 ba2a6723d9b24d9baab74b631a019bad
msgid ""
"Finalize a communicator object *comm*. When the communicator is marked as"
" nonblocking, *ncclCommFinalize* is a nonblocking function. Successful "
"return from it will set communicator state as *ncclInProgress* and "
"indicates the communicator is under finalization where all uncompleted "
"operations and the network-related resources are being flushed and freed."
" Once all NCCL operations are complete, the communicator will transition "
"to the *ncclSuccess* state. Users can query that state with "
"*ncclCommGetAsyncError*."
msgstr ""

#: ../../source/api/comms.rst:103 d84d1f324fba4e5db8fd93b59ad567da
msgid "ncclCommDestroy"
msgstr ""

#: ../../source/api/comms.rst:107 d3b99241e7b44c318742b6d8bf995cd7
msgid ""
"Destroy a communicator object *comm*. *ncclCommDestroy* only frees the "
"local resources that are allocated to the communicator object *comm* if "
"*ncclCommFinalize* was previously called on the communicator; otherwise, "
"*ncclCommDestroy* will call ncclCommFinalize internally. If "
"*ncclCommFinalize* is called by users, users should guarantee that the "
"state of the communicator become *ncclSuccess* before calling "
"*ncclCommDestroy*. In all cases, the communicators should no longer be "
"accessed after ncclCommDestroy returns. It is recommended that user call "
"*ncclCommFinalize* and then *ncclCommDestroy*."
msgstr ""

#: ../../source/api/comms.rst:116 4bc3cc58111e40049cfc267fffb5f0a4
msgid "ncclCommAbort"
msgstr ""

#: ../../source/api/comms.rst:120 2518213f6cd54bbfbd7e24eaafc9d4ad
msgid ""
"Frees resources that are allocated to a communicator object *comm*. Will "
"abort any uncompleted operations before destroying the communicator."
msgstr ""

#: ../../source/api/comms.rst:124 d18a36850a974364949e20c433729813
msgid "ncclCommGetAsyncError"
msgstr ""

#: ../../source/api/comms.rst:128 87fa6db6cf2e46d6842d2b1abf4dff6c
msgid ""
"Queries the progress and potential errors of asynchronous NCCL "
"operations. Operations which do not require a stream argument (e.g. "
"ncclCommFinalize) can be considered complete as soon as the function "
"returns *ncclSuccess*; operations with a stream argument (e.g. "
"ncclAllReduce) will return *ncclSuccess* as soon as the operation is "
"posted on the stream but may also report errors through "
"ncclCommGetAsyncError() until they are completed. If return code of any "
"NCCL functions is *ncclInProgress*, it means the operation is in the "
"process of being enqueued in the background, and users must query the "
"states of the communicators until the all states become *ncclSuccess* "
"before calling next NCCL function. Before the states change into "
"*ncclSuccess*, users are not allowed to issue CUDA kernel to the streams "
"being used by NCCL. If there has been an error on the communicator, user "
"should destroy the communicator with :c:func:`ncclCommAbort`. If an error"
" occurs on the communicator, nothing can be assumed about the completion "
"or correctness of operations enqueued on that communicator."
msgstr ""

#: ../../source/api/comms.rst:141 75ef5e0400a0431290c398b1ec2e42d6
msgid "ncclCommCount"
msgstr ""

#: ../../source/api/comms.rst:145 f4fd8a4bce054cf0a267fba1fc4dc84b
msgid "Returns in *count* the number of ranks in the NCCL communicator *comm*."
msgstr ""

#: ../../source/api/comms.rst:148 12e5887b8bf943e98d725cf74aeebefd
msgid "ncclCommCuDevice"
msgstr ""

#: ../../source/api/comms.rst:152 bde0b0dbcea9470ea5c453b5a91f722a
msgid ""
"Returns in *device* the CUDA device associated with the NCCL communicator"
" *comm*."
msgstr ""

#: ../../source/api/comms.rst:155 a75fe8ebff2743698a12646894ab95de
msgid "ncclCommUserRank"
msgstr ""

#: ../../source/api/comms.rst:159 44d19b67d38d4913be350115eef2a98c
msgid "Returns in *rank* the rank of the NCCL communicator *comm*."
msgstr ""

#: ../../source/api/comms.rst:162 519fbc2a45d543289e8a60000a319d0b
msgid "ncclCommRegister"
msgstr ""

#: ../../source/api/comms.rst:166 227b6aab1ba24c9c968ecc6363b6300f
msgid ""
"Register buffer with *size* under communicator *comm* for zero-copy "
"communication, and *handle* is returned for future unregistration. See "
"*buff* and *size* requirements (:ref: `user_buffer_reg`)."
msgstr ""

#: ../../source/api/comms.rst:170 6257788b720249b8b77a980efe356740
msgid "ncclCommDeregister"
msgstr ""

#: ../../source/api/comms.rst:174 049ffa0be46544949d6d28ac035c54d0
msgid "Deregister buffer represented by *handle* under communicator *comm*."
msgstr ""

#: ../../source/api/comms.rst:177 e4afc62bc6ef470bb8d95e7f2294b775
msgid "ncclMemAlloc"
msgstr ""

#: ../../source/api/comms.rst:181 a5a4baf5999f4b6fa2ffb6a8bd662cbc
msgid ""
"Allocate a GPU buffer with *size*. Allocated buffer head address will be "
"returned by *ptr*, and the actual allocated size can be larger than "
"requested because of the buffer granularity requirements from all types "
"of NCCL optimizations."
msgstr ""

#: ../../source/api/comms.rst:186 0c20ef441735430dad2b51fcebb3d975
msgid "ncclMemFree"
msgstr ""

#: ../../source/api/comms.rst:190 8b2b594afa1643e88055c8c864f69d17
msgid "Free memory allocated by *ncclMemAlloc()*."
msgstr ""

